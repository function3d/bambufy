# printer modifications

[extruder]
pressure_advance:0.042

[lis2dw]
spi_speed: 100000

[stepper_x]
microsteps: 64

[stepper_y]
microsteps: 64

[stepper_z]
microsteps: 64

[extruder]
microsteps: 64

[tmc2209 extruder]
interpolate:False

[tmc2209 stepper_x]
interpolate:False


[tmc2209 stepper_y]
interpolate:False

[tmc2209 stepper_z]
interpolate:False

[zmod_ifs]
debug=False

[printer]
max_velocity: 500
max_accel: 8000
square_corner_velocity: 5

[probe]                                             
samples: 2
samples_tolerance:0.05
samples_tolerance_retries:5
lift_speed:15
sample_retract_dist:3

[bed_mesh]                         
speed: 300
probe_count: 7, 7
horizontal_move_z:2

[screws_tilt_adjust]
screw1: 12.5, 12.5
screw1_name: Left Near
screw2: 202, 12.5
screw2_name: Right Near
screw3: 202, 202
screw3_name: Right Far
screw4: 12.5, 202
screw4_name: Left Far
horizontal_move_z: 2
speed: 300
screw_thread: CCW-M3

#ifs sensors modifications (need https://github.com/function3d/zmod_ff5x)

[zmod_ifs_switch_sensor head_switch_sensor]
pause_on_runout: False
runout_gcode:
    _RUNOUT_HEAD

[zmod_ifs_motion_sensor ifs_motion_sensor]
pause_on_runout: False
runout_gcode:
    _RUNOUT_MOTION

[zmod_ifs_motion_sensor _ifs_motion_sensor_1]
pause_on_runout: False
port:1

[zmod_ifs_motion_sensor _ifs_motion_sensor_2]
pause_on_runout: False
port:2

[zmod_ifs_motion_sensor _ifs_motion_sensor_3]
pause_on_runout: False
port:3

[zmod_ifs_motion_sensor _ifs_motion_sensor_4]
pause_on_runout: False
port:4

[zmod_ifs_switch_sensor _ifs_port_sensor_1]
pause_on_runout: False
type:port
port:1
runout_gcode:
    _RUNOUT_PORT PORT=1
insert_gcode:
    _IFS_INSERT PORT=1

[zmod_ifs_switch_sensor _ifs_port_sensor_2]
pause_on_runout: False
type:port
port:2
runout_gcode:
    _RUNOUT_PORT PORT=2
insert_gcode:
    _IFS_INSERT PORT=2

[zmod_ifs_switch_sensor _ifs_port_sensor_3]
pause_on_runout: False
type:port
port:3
runout_gcode:
    _RUNOUT_PORT PORT=3
insert_gcode:
    _IFS_INSERT PORT=3

[zmod_ifs_switch_sensor _ifs_port_sensor_4]
pause_on_runout: False
type:port
port:4
runout_gcode:
    _RUNOUT_PORT PORT=4
insert_gcode:
    _IFS_INSERT PORT=4

[gcode_macro _RUNOUT_MOTION]
gcode:
    {% if printer.print_stats.state == "printing" %}
      {% set ifs = printer['gcode_macro _IFS_VARS'] %}
        PAUSE REASON="jam"
    {% endif %}

[gcode_macro _RUNOUT_HEAD]
gcode:
    {% if printer.print_stats.state == "printing" %}
      {% set ifs = printer['gcode_macro _IFS_VARS'] %}
      {% if printer['filament_switch_sensor _ifs_port_sensor_'+ifs.extruder_port|string].filament_detected %}
        _IFS_VARS extruder_port=0
        SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE=consume VALUE=0
        PAUSE REASON="broken"
      {% else %}
        {% if ifs.backup == 1 and ifs.consume > 0 %}
          {% set result = {'backup': 0} %}
          {% for type in ifs.types %} # Looking for an alternative port of the same filament TYPE of current tool
            {% set port = loop.index %}
            {% if result.backup == 0 %}
            {% if port|int != ifs.extruder_port|int and ifs.types[ifs.extruder_port] == type and printer['filament_switch_sensor _ifs_port_sensor_'+port|string].filament_detected %}
                # assign port to current tool
                _IFS_COLORS_ASSIGN TOOL={ifs.current_tool} PORT={port} DIALOG=0
                {% set _ = result.update({'backup': 1}) %}
                RESPOND PREFIX="info" MSG="Run out filament (Head) ({ifs.extruder_port|string}), backup, loading {port} and continuing with printing..."
                _IFS_VARS extruder_port=0
                SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE=consume VALUE=0
                PAUSE reason="backup"
            {% endif %}
            {% endif %}
          {% endfor %}
          {% if result.backup == 0 %} 
            
            _IFS_VARS extruder_port=0
            SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE=consume VALUE=0
            PAUSE REASON="nobackup"
          {% endif %}
        {% else %}
          _IFS_VARS extruder_port=0
          SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE=consume VALUE=0
          PAUSE REASON="runout"
        {% endif %}
      {% endif %}
    {% endif %}

[gcode_macro _RUNOUT_PORT]
gcode:
  {% set port = params.PORT|default(0)|int %}
  {% set ifs = printer['gcode_macro _IFS_VARS'] %}
  
  {% if printer.print_stats.state == "printing" %}
    {% if port == ifs.extruder_port %}
        {% if port > 0 %}
            {% if printer['filament_motion_sensor _ifs_motion_sensor_'+port|string].filament_detected %}
                G1 E-2 F300
                RESPOND PREFIX="info" MSG="Filament run out in the IFS ({port|string}), we continue printing until it runs out in the extruder or there is a filament change"
                # it was moving, so we disable motion sensor
                SET_FILAMENT_SENSOR SENSOR=ifs_motion_sensor ENABLE=0
                SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE=consume VALUE={port}
                G1 E2 F300
            {% endif %}
        {% endif %}
    {% endif %}
  {% else %}
    {% if printer['gcode_macro _IFS_COLORS'].open == 1 %}
      UPDATE_DELAYED_GCODE ID=_IFS_COLORS_DELAYED DURATION=1
    {% endif %}
  {% endif %}

[gcode_macro _IFS_INSERT]
gcode:
    {% set ifs = printer['gcode_macro _IFS_VARS'] %}
    {% if not printer.print_stats.state == "printing" %}
        {% set port = params.PORT|default(0)|int %}
        {% set filament_autoinsert_full_length = params.FILAMENT_AUTOINSERT_FULL_LENGTH|default(ifs.filament_autoinsert_full_length)|int %}
        {% set filament_home_speed = params.FILAMENT_HOME_SPEED|default(ifs.filament_home_speed)|int %}
        {% set filament_insert_speed = params.FILAMENT_INSERT_SPEED|default(ifs.filament_insert_speed)|int %}
        {% set filament_tube_length = params.FILAMENT_TUBE_LENGTH|default(ifs.filament_tube_length)|int %}
        {% set filament_unload_speed = params.FILAMENT_UNLOAD_SPEED|default(ifs.filament_unload_speed)|int %}
        {% set nozzle_cleaning_length = params.NOZZLE_CLEANING_LENGTH|default(ifs.nozzle_cleaning_length)|int %}

        _INFO_DIALOG TITLE="Insert filament detected" MSG="Auto insert: {port} ..."
        IFS_F24 PRUTOK={port}
        IFS_F10 PRUTOK={port} LEN={filament_autoinsert_full_length} SPEED={filament_insert_speed}
        {% if not printer['filament_switch_sensor head_switch_sensor'].filament_detected %}
            IFS_F10 PRUTOK={port} LEN={filament_tube_length} SPEED={filament_home_speed} CHECK=1 # Homering the filament no printing
            IFS_F11 PRUTOK={port} LEN={nozzle_cleaning_length} SPEED={filament_unload_speed}
        {% endif %}
        IFS_F39 PRUTOK={port}
        {% if printer['gcode_macro _IFS_COLORS'].open == 1 %}
          UPDATE_DELAYED_GCODE ID=_IFS_COLORS_DELAYED DURATION=1
        {% else %}
          RESPOND TYPE=command MSG="action:prompt_end"
        {% endif %}
    {% endif %}


# manage leftover filament when runout

[gcode_macro _CONSUME]
gcode:
    {% set consume = printer['gcode_macro _IFS_VARS'].consume %}

    {% if consume > 0 %}
        # Disable HEAD sensor because it will activate PAUSE
        SET_FILAMENT_SENSOR SENSOR=head_switch_sensor ENABLE=0 
        {% for i in range(20) %}
            # We extrude 50 mm * 20 = 1 meter or less if the filament in the head runs out
     		_CONSUME_CHECK_AND_POOP # We need this call to check the sensor in Head every so often
     	{% endfor %}
        _IFS_VARS extruder_port=0
        SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE=consume VALUE=0
        SET_FILAMENT_SENSOR SENSOR=head_switch_sensor ENABLE=1
    {% endif %}


[gcode_macro _CONSUME_CHECK_AND_POOP]
gcode:
    {% if printer['filament_switch_sensor head_switch_sensor'].filament_detected %}
        {% set ifs = printer['gcode_macro _IFS_VARS'] %}
        POOP FLUSH_LENGTH=50 E_FEEDRATE={ifs.e_feedrate}
    {% endif %}

# Check the status of the filaments in the IFS ports.

[gcode_macro _CHECK_FILAMENT]
variable_check_0: 0

gcode:
    _IFS_VARS extruder_port=0
    {% if printer['filament_switch_sensor head_switch_sensor'].filament_detected %}
        SET_GCODE_VARIABLE MACRO=_CHECK_FILAMENT VARIABLE=check_0 VALUE=1
        # We pulled each slot a little bit in case one of them was just activating the sensor without being gripped by the extruder.
        _INFO_DIALOG TITLE="Checking filaments" MSG="Checking the status of the filaments in the IFS ports ..."
        {% if printer['filament_switch_sensor _ifs_port_sensor_1'].filament_detected %}
          IFS_F24 PRUTOK=1
          IFS_F11 PRUTOK=1 LEN=20 SPEED=600
        {% endif %}
        {% if printer['filament_switch_sensor _ifs_port_sensor_2'].filament_detected %}
        IFS_F24 PRUTOK=2
        IFS_F11 PRUTOK=2 LEN=20 SPEED=600
        {% endif %}
        {% if printer['filament_switch_sensor _ifs_port_sensor_3'].filament_detected %}
        IFS_F24 PRUTOK=3
        IFS_F11 PRUTOK=3 LEN=20 SPEED=600
        {% endif %}
        {% if printer['filament_switch_sensor _ifs_port_sensor_4'].filament_detected %}
        IFS_F24 PRUTOK=4
        IFS_F11 PRUTOK=4 LEN=20 SPEED=600
        {% endif %}
        IFS_F39 PRUTOK=4
        _CHECK_FILAMENT_0 #required: check the sensor head in other macro, not in this
        _CHECK_FILAMENT_1 #required: check the sensor head in other macro, not in this
        _CHECK_FILAMENT_2 #required: check the _ifs_motion_sensor_x in other macro, not in this
        RESPOND TYPE=command MSG="action:prompt_end"
    {% endif %}
    _IFS_VARS extruder_port=?
    SET_GCODE_VARIABLE MACRO=_CHECK_FILAMENT VARIABLE=check_0 VALUE=0

[gcode_macro _CHECK_FILAMENT_0]
gcode:
    {% if not printer['filament_switch_sensor head_switch_sensor'].filament_detected and printer['gcode_macro _CHECK_FILAMENT'].check_0 %}
      # one of them was just activating the sensor so we retract 45mm all of them.
        _INFO_DIALOG TITLE="Checking filaments" MSG="One of the filaments was just activating the sensor, retract 45mm all of them ..."
        IFS_F24 PRUTOK=1
        IFS_F11 PRUTOK=1 LEN=45 SPEED=600
        IFS_F24 PRUTOK=2
        IFS_F11 PRUTOK=2 LEN=45 SPEED=600
        IFS_F24 PRUTOK=3
        IFS_F11 PRUTOK=3 LEN=45 SPEED=600
        IFS_F24 PRUTOK=4
        IFS_F11 PRUTOK=4 LEN=45 SPEED=600
        IFS_F39 PRUTOK=4
    {% endif %}

[gcode_macro _CHECK_FILAMENT_1]
gcode:
    {% if printer['filament_switch_sensor head_switch_sensor'].filament_detected %}
        {% set flush_length = 45 %}
        _INFO_DIALOG TITLE="Checking filaments" MSG="One of the filaments is gripped by the extruder so we extrude {flush_length|string}mm to determine which one it is ..."
        _DISABLE_SENSORS
        POOP FLUSH_LENGTH={flush_length}
        M400
        _ENABLE_SENSORS
    {% endif %}

[gcode_macro _CHECK_FILAMENT_2]
gcode:
    # we check what filament move in the ifs motion sensor and that is the extruder_port 
    {% if printer['filament_switch_sensor head_switch_sensor'].filament_detected %}
      {% if printer['filament_motion_sensor _ifs_motion_sensor_1'].filament_detected %}
          _IFS_VARS extruder_port=1
      {% elif printer['filament_motion_sensor _ifs_motion_sensor_2'].filament_detected %}
          _IFS_VARS extruder_port=2
      {% elif printer['filament_motion_sensor _ifs_motion_sensor_3'].filament_detected %}
          _IFS_VARS extruder_port=3
      {% elif printer['filament_motion_sensor _ifs_motion_sensor_4'].filament_detected %}
          _IFS_VARS extruder_port=4
      {% endif %} 
    {% endif %}


# dialogs in mainsail to assign colors(tools) to ports in the IFS or print from external spool

[gcode_macro _IFS_COLORS_CANCEL]
gcode:
  RESPOND type="command" msg="action:prompt_end"
  SET_GCODE_VARIABLE MACRO=_IFS_COLORS VARIABLE=open VALUE=0
  #CANCEL_PRINT_BASE
  #CLEAR_PAUSE
  

[gcode_macro _IFS_COLORS_PRINT]
gcode:
    {% set ifs_colors = printer['gcode_macro _IFS_COLORS'] %}
    RESPOND type="command" msg="action:prompt_end"
    SET_GCODE_VARIABLE MACRO=_IFS_COLORS VARIABLE=open VALUE=0
    SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE=start VALUE=0
    BASE_SDCARD_PRINT_FILE FILENAME="{ifs_colors.filename}"
    {ifs_colors.exclude}
    
[gcode_macro _IFS_COLORS_ASSIGN]
gcode:
    {% set ifs = printer['gcode_macro _IFS_VARS'] %}
    {% set ifs_colors = printer['gcode_macro _IFS_COLORS'] %}
    {% set tool = params.TOOL|int %}
    {% set port = params.PORT|int %}
    {% set dialog = params.DIALOG|default(1)|int %}

    {% if tool == 0 %}
    {% set port1 = port %}
    {% else %}
        {% set port1 = ifs.tools[0] %}
    {% endif %}

    {% if tool == 1 %}
        {% set port2 = port %}
    {% else %}
        {% set port2 = ifs.tools[1] %}
    {% endif %}

    {% if tool == 2 %}
        {% set port3 = port %}
    {% else %}
        {% set port3 = ifs.tools[2] %}
    {% endif %}

    {% if tool == 3 %}
        {% set port4 = port %}
    {% else %}
        {% set port4 = ifs.tools[3] %}
    {% endif %}

    {% if tool == 4 %}
        {% set port5 = port %}
    {% else %}
        {% set port5 = ifs.tools[4] %}
    {% endif %}

    {% if tool == 5 %}
        {% set port6 = port %}
    {% else %}
        {% set port6 = ifs.tools[5] %}
    {% endif %}

    {% if tool == 6 %}
        {% set port7 = port %}
    {% else %}
        {% set port7 = ifs.tools[6] %}
    {% endif %}

    {% if tool == 7 %}
        {% set port8 = port %}
    {% else %}
        {% set port8 = ifs.tools[7] %}
    {% endif %}

    {% if tool == 8 %}
        {% set port9 = port %}
    {% else %}
        {% set port9 = ifs.tools[8] %}
    {% endif %}

    {% if tool == 9 %}
        {% set port10 = port %}
    {% else %}
        {% set port10 = ifs.tools[9] %}
    {% endif %}

    {% if tool == 10 %}
        {% set port11 = port %}
    {% else %}
        {% set port11 = ifs.tools[10] %}
    {% endif %}

    {% if tool == 11 %}
        {% set port12 = port %}
    {% else %}
        {% set port12 = ifs.tools[11] %}
    {% endif %}

    {% if tool == 12 %}
        {% set port13 = port %}
    {% else %}
        {% set port13 = ifs.tools[12] %}
    {% endif %}

    {% if tool == 13 %}
        {% set port14 = port %}
    {% else %}
        {% set port14 = ifs.tools[13] %}
    {% endif %}

    {% if tool == 14 %}
        {% set port15 = port %}
    {% else %}
        {% set port15 = ifs.tools[14] %}
    {% endif %}

    {% if tool == 15 %}
        {% set port16 = port %}
    {% else %}
        {% set port16 = ifs.tools[15] %}
    {% endif %}
    
    SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE=tools VALUE=[{port1},{port2},{port3},{port4},{port5},{port6},{port7},{port8},{port9},{port10},{port11},{port12},{port13},{port14},{port15},{port16}]
    SAVE_VARIABLE VARIABLE=ifs_tools VALUE=[{port1},{port2},{port3},{port4},{port5},{port6},{port7},{port8},{port9},{port10},{port11},{port12},{port13},{port14},{port15},{port16}]
    _IFS_VARS external=0

    _IFS_COLORS_PORT_TYPE PORT={port} TYPE={ifs_colors.types.split(',')[tool]}
    
    {% if dialog == 1 %}
      _IFS_COLORS
    {% endif %}

[gcode_macro _IFS_COLORS_IFS]
gcode:
   {% set external = params.EXTERNAL|int %}
  _IFS_VARS external={external}
  _IFS_VARS extruder_port=0
  _IFS_COLORS

[gcode_macro _IFS_COLORS_KAMP] #bed leveling
gcode:
  {% set kamp = params.KAMP|int %}
    
  _IFS_VARS kamp={kamp}
  _IFS_COLORS

[gcode_macro _IFS_COLORS_BACKUP]
gcode:
  {% set backup = params.BACKUP|int %}
    
  _IFS_VARS backup={backup}
  _IFS_COLORS

[gcode_macro _IFS_COLORS_PORT_TYPE]
gcode:
  {% set port = params.PORT|int %}
  {% set type = params.TYPE|string %}
  {% set ifs = printer['gcode_macro _IFS_VARS'] %}
  
  {% if port == 1 %}
    {% set type1 = type %}
  {% else %}
    {% set type1 = ifs.types[0] %}
  {% endif %}
  {% if port == 2 %}
    {% set type2 = type %}
  {% else %}
    {% set type2 = ifs.types[1] %}
  {% endif %}
  {% if port == 3 %}
    {% set type3 = type %}
  {% else %}
    {% set type3 = ifs.types[2] %}
  {% endif %}
  {% if port == 4 %}
    {% set type4 = type %}
  {% else %}
    {% set type4 = ifs.types[3] %}
  {% endif %}
  
  _IFS_VARS types="['{ type1 }','{ type2 }','{ type3 }','{ type4 }']"
  
[gcode_macro _IFS_COLORS_PORT_TYPE_DIALOG]
gcode:
  {% set port = params.PORT|int %}
  {% set type = params.TYPE|string %}
  {% set ifs = printer['gcode_macro _IFS_VARS'] %}
  
  _IFS_COLORS_PORT_TYPE PORT={port} TYPE={type}
  _IFS_COLORS

[gcode_macro _IFS_COLORS_TYPE]
gcode:
  {% set port = params.PORT|int %}
  {% set types = ['PLA','PETG','ABS','TPU','ASA','PA','PC','PET'] %}
  {% set ifs = printer['gcode_macro _IFS_VARS'] %}
    
  RESPOND TYPE=command MSG="action:prompt_begin Type of Port {port}"
  RESPOND TYPE=command MSG="action:prompt_button_group_start"

  {% for type in types %}
    {% if type == ifs.types[port-1] %}
      RESPOND TYPE=command MSG="action:prompt_button {type}|_IFS_COLORS_PORT_TYPE_DIALOG PORT={port} TYPE={type}|primary"
    {% else %}
      RESPOND TYPE=command MSG="action:prompt_button {type}|_IFS_COLORS_PORT_TYPE_DIALOG PORT={port} TYPE={type}"
    {% endif %}
  {% endfor %}
  RESPOND TYPE=command MSG="action:prompt_button_group_end"
  RESPOND TYPE=command MSG="action:prompt_show"

[delayed_gcode _IFS_COLORS_DELAYED]
initial_duration:0
gcode:
  _IFS_COLORS

[gcode_macro _IFS_COLORS]
variable_tools:[]
variable_colors:''
variable_types:''
variable_open:0
variable_filename:''
variable_exclude:''
gcode:
    {% set ifs = printer['gcode_macro _IFS_VARS'] %}
    {% set ifs_colors = printer['gcode_macro _IFS_COLORS'] %}

    
    {% if 'FILENAME' in params %}
      SET_GCODE_VARIABLE MACRO=_IFS_COLORS VARIABLE=filename VALUE='"{params.FILENAME}"'
    {% endif %}
    {% if 'EXCLUDE' in params %}
      SET_GCODE_VARIABLE MACRO=_IFS_COLORS VARIABLE=exclude VALUE='"{params.EXCLUDE}"'
    {% endif %}


    {% if 'START' in params %} # regardless of the value, if the START parameter is present, then it is the call from preprint.py script
      SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE=start VALUE=1
      {% set start = 1 %}
    {% else %}
      {% set start = ifs.start %}
    {% endif %}


    {% set tools = params.TOOLS|default(0) %}
    {% if tools != 0 %}
      {% set tools = params.TOOLS.split(',') %}
      SET_GCODE_VARIABLE MACRO=_IFS_COLORS VARIABLE=tools VALUE='{tools}'
    {% else %}
      {% set tools = ifs_colors.tools %}
    {% endif %}

    {% set colors = params.COLORS|default(0) %}
    {% if colors != 0 %}
      {% set colors = params.COLORS.split(',') %}
      SET_GCODE_VARIABLE MACRO=_IFS_COLORS VARIABLE=colors VALUE='"{params.COLORS}"'
    {% else %}
      {% set colors = ifs_colors.colors.split(',') %}
    {% endif %}

    {% set types = params.TYPES|default(0) %}
    {% if types != 0 %}
      {% set types = params.TYPES.split(',') %}
      SET_GCODE_VARIABLE MACRO=_IFS_COLORS VARIABLE=types VALUE='"{params.TYPES}"'
    {% else %}
      {% set types = ifs_colors.types.split(',') %}
    {% endif %}

    {% set ifs_types = [] %}
    {% for i in range(1,5) %}
      {% set ns = namespace(tool=0,type='') %}
      {% for port in ifs.tools %}
        {% if port == i and ns.type=='' %}
          {% if ifs.types[i-1] == '' %}
            _IFS_COLORS_PORT_TYPE PORT={port} TYPE={types[ns.tool]}
            {% set ns.type = types[ns.tool] %}
          {% else %}
            _IFS_COLORS_PORT_TYPE PORT={port} TYPE={ifs.types[i-1]}
            {% set ns.type = ifs.types[i-1] %}
          {% endif %}
        {% endif %}
        {% set ns.tool = ns.tool + 1 %}
      {% endfor %}
      {% if ns.type == '' %}
        {% set _ = ifs_types.append(ifs.types[i-1]) %}
      {% else %}
        {% set _ = ifs_types.append(ns.type) %}
      {% endif %}
    {% endfor %}

    {% if 'E_FEEDRATES' in params %}
      {% set e_feedrates = params.E_FEEDRATES.split(',') %}
      {% set ns = namespace(e_feedrates=[]) %}
      {% for tool in range(0,16) %}
        {% if tool|string in tools %}
          {% set _ = ns.e_feedrates.append(e_feedrates[tool]|int) %}
        {% else %}
          {% set _ = ns.e_feedrates.append(130) %}
        {% endif %}
      {% endfor %}
      _IFS_VARS e_feedrates='{ns.e_feedrates}'
    {% endif %}
    
    RESPOND TYPE=command MSG="action:prompt_begin Color to Port"
    
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    {% if (ifs.kamp == 1) %}
      RESPOND TYPE=command MSG="action:prompt_button LEVELING|_IFS_COLORS_KAMP KAMP=0|primary"
    {% else %}
      RESPOND TYPE=command MSG="action:prompt_button LEVELING|_IFS_COLORS_KAMP KAMP=1 "
    {% endif %}

    {% set ifs_external = ifs.external %}
    {% if ifs.external==1 and tools|length > 1 %}
      _IFS_VARS external=0
      {% set ifs_external = 0 %}
      RESPOND TYPE=command MSG="action:prompt_button IFS||primary"
    {% elif ifs.external==0 and tools|length > 1 %}
      RESPOND TYPE=command MSG="action:prompt_button IFS||primary"
    {% elif ifs.external==1 %}
      RESPOND TYPE=command MSG="action:prompt_button IFS|_IFS_COLORS_IFS EXTERNAL=0"
    {% else %}
      RESPOND TYPE=command MSG="action:prompt_button IFS|_IFS_COLORS_IFS EXTERNAL=1|primary"
    {% endif %} 

    {% if (ifs.backup == 1) %}
      RESPOND TYPE=command MSG="action:prompt_button BACKUP|_IFS_COLORS_BACKUP BACKUP=0|primary"
    {% else %}
      RESPOND TYPE=command MSG="action:prompt_button BACKUP|_IFS_COLORS_BACKUP BACKUP=1"
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_button_group_end"

    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    {% for port in range(1,5) %}
      {% if printer['filament_switch_sensor _ifs_port_sensor_'+port|string].filament_detected %}
        RESPOND TYPE=command MSG="action:prompt_button P{port}:{ifs_types[port-1]}|_IFS_COLORS_TYPE PORT={port}|primary"
      {% else %}
        RESPOND TYPE=command MSG="action:prompt_button P{port}:{ifs_types[port-1]}||error"
      {% endif %}
    {% endfor %}
    RESPOND TYPE=command MSG="action:prompt_button_group_end"

    {% set ns = namespace(print=[],print_=1) %}
    {% if ifs_external==0 %}
    {% for tool in tools %}
      {% set tool_index = loop.index0 %}
      {% set _ = ns.print.append(0) %}
          RESPOND TYPE=command MSG="action:prompt_button_group_start"
            RESPOND TYPE=command MSG="action:prompt_button C{tool|int + 1}:{types[tool|int]}||ifs-color-slot warning|{colors[tool|int]}"
            {% for port in range(1,5) %}
              {% if types[tool|int] != ifs_types[port-1] or not printer['filament_switch_sensor _ifs_port_sensor_'+port|string].filament_detected %}
                RESPOND TYPE=command MSG="action:prompt_button P{port}||error"
              {% elif port|int == ifs.tools[tool|int] %}
                RESPOND TYPE=command MSG="action:prompt_button P{port}|_IFS_COLORS_ASSIGN TOOL={tool} PORT={port}|primary"
                {% set _ = ns.print.__setitem__(tool_index, 1) %}
              {% else %}
                RESPOND TYPE=command MSG="action:prompt_button P{port}|_IFS_COLORS_ASSIGN TOOL={tool} PORT={port}"
              {% endif %}
            {% endfor %}
          RESPOND TYPE=command MSG="action:prompt_button_group_end"
    {% endfor %}
    {% endif %}
    {% if start == 1 %}
      RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|_IFS_COLORS_CANCEL"
      {% for val in ns.print %}
        {% if val != 1 and ns.print_ == 1 %}
          {% set ns.print_ = 0 %}
        {% endif %}
      {% endfor %}
      {% if ns.print_ == 1 %}
        RESPOND TYPE=command MSG="action:prompt_footer_button Print|_IFS_COLORS_PRINT|primary"
      {% else %}
        RESPOND TYPE=command MSG="action:prompt_footer_button Print||error"
      {% endif %}
    {% else %}
      RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND type='command' msg='action:prompt_end'"
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_show"
    SET_GCODE_VARIABLE MACRO=_IFS_COLORS VARIABLE=open VALUE=1


# variables for load/unload filament from IFS and others states

[gcode_macro _IFS_VARS]
#  "_IFS_VARS filament_load_speed=?" print the current filament load speed
#  "_IFS_VARS filament_load_speed=600" change the load speed to 600 for the following filament changes

variable_filament_unload_before_cutting:24
#for 24mm retraction before cut, 36mm are needed to fill the hotend without material oozing out
variable_filament_drop_length:  36
variable_filament_unload_after_cutting:2
variable_filament_unload_speed:1500
variable_nozzle_cleaning_length:60
variable_filament_load_speed: 900
variable_filament_home_speed: 900
variable_filament_insert_speed: 2800
variable_filament_tube_length: 1000
variable_filament_catch_length: 5
variable_filament_pressure_length: 2 
variable_filament_autoinsert_full_length: 550
variable_tools:[1,2,3,4,4,4,4,4,4,4,4,4,4,4,4,4] # index is the tool, value is the IFS port
variable_external:0
variable_extruder_port: -1 
variable_current_tool: -1
variable_extruder_temp: 0
variable_extruder_fan: 0
variable_bed_temp: 0 # for zrestore
variable_e_feedrate: 130
variable_e_feedrates:[]
variable_consume: 0
variable_kamp: 1
variable_backup: 0
variable_types:['PLA','PLA','PLA','PLA']
variable_start:0
variable_trash_pos:[52.50,229]
variable_sbros_trash_speed:3000
variable_info_dialog:1

gcode:
    {% for variable, value in params.items() %}
      {% if value == '?' %}
        RESPOND PREFIX="info" MSG="{variable|lower|replace('_', ' ')|title} : {printer['gcode_macro _IFS_VARS'][variable|lower]}"
      {% else %}
        SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE={variable|lower} VALUE="{value}"
        SAVE_VARIABLE VARIABLE=ifs_{variable|lower} VALUE="{value}"
      {% endif %}
    {% endfor %}


[delayed_gcode _IFS_INIT]
# load the variables at startup
initial_duration:1
gcode:
    IFS_F18
    {% for var in printer['gcode_macro _IFS_VARS'] if printer.save_variables.variables['ifs_'+var] is defined %}
        {% if not var|lower in ['config', 'settings'] %}
            RESPOND PREFIX="info" MSG="{var}: {printer.save_variables.variables['ifs_'+var]}"
            SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE={var} VALUE="{printer.save_variables.variables['ifs_'+var]}"
        {% endif %}
    {% endfor %}
    SDCARD_ENABLE_FFM ENABLE=0
    LOAD_GCODE_OFFSET
    ZRESTORE TEST=1


#Tools gcode commands

[gcode_macro T0]
gcode:
    _T TOOL=0

[gcode_macro T1]
gcode:
    _T TOOL=1

[gcode_macro T2]
gcode:
    _T TOOL=2

[gcode_macro T3]
gcode:
    _T TOOL=3

[gcode_macro T4]
gcode:
    _T TOOL=4

[gcode_macro T5]
gcode:
    _T TOOL=5

[gcode_macro T6]
gcode:
    _T TOOL=6

[gcode_macro T7]
gcode:
    _T TOOL=7

[gcode_macro T8]
gcode:
    _T TOOL=8

[gcode_macro T9]
gcode:
    _T TOOL=9

[gcode_macro T10]
gcode:
    _T TOOL=10

[gcode_macro T11]
gcode:
    _T TOOL=11

[gcode_macro T12]
gcode:
    _T TOOL=12

[gcode_macro T13]
gcode:
    _T TOOL=13

[gcode_macro T14]
gcode:
    _T TOOL=14

[gcode_macro T15]
gcode:
    _T TOOL=15

[gcode_macro _NOPOOP]
variable_nopoop:0
variable_x:0
variable_y:0
variable_z:0
gcode:
    SET_GCODE_VARIABLE MACRO=_NOPOOP VARIABLE=nopoop VALUE=1
    SET_GCODE_VARIABLE MACRO=_NOPOOP VARIABLE=x VALUE={printer.gcode_move.gcode_position.x}
    SET_GCODE_VARIABLE MACRO=_NOPOOP VARIABLE=y VALUE={printer.gcode_move.gcode_position.y}
    SET_GCODE_VARIABLE MACRO=_NOPOOP VARIABLE=z VALUE={printer.gcode_move.gcode_position.z}

[gcode_macro _T]
#  Checks to be performed before the actual tool/filament change.
gcode:
    {% set ifs = printer['gcode_macro _IFS_VARS'] %}
    {% if ifs.external == 0 %}
      {% set tool = params.TOOL|default(0)|int %}
      _IFS_VARS current_tool={tool}
      {% set extruder_port = ifs.extruder_port %}
      {% set port = ifs.tools[tool] %}
      {% if extruder_port > 0 and not printer['filament_switch_sensor head_switch_sensor'].filament_detected %}
          {% set extruder_port = 0 %}
          _IFS_VARS extruder_port=0
      {% endif %}
      {% if port > 0 %}
          RESPOND PREFIX="info" MSG="Loading filament {port}"
          {% if extruder_port == -1 %}
              _CHECK_FILAMENT
          {% endif %}
          # if there is a filament in the IFS (port)
          {% if printer['filament_switch_sensor _ifs_port_sensor_'+port|string].filament_detected %}
            _DISABLE_SENSORS
            _INSERT_PORT_IFS PORT={port}
            _ENABLE_SENSORS
          {% else %}
            PAUSE REASON="empty"
          {% endif %}
      {% endif %}
      # slicer set the temp for new filament [new_filament_temp] we save here
      _IFS_VARS extruder_temp={(printer.extruder.target or 255)|int}
      _IFS_VARS e_feedrate={ifs.e_feedrates[tool]|int}
    {% endif %}

# load/unload filaments from IFS, redefined zmod macros.
# poop/temperatures/materials are managed by bambu studio (or Orca) Change filament G-code
# see MACHINE_GCODE.md

[gcode_macro _INSERT_PORT_IFS]
description: 
gcode:
  {% set port = params.PORT|default(1)|int %}
  {% set ifs = printer['gcode_macro _IFS_VARS'] %}
  {% set extruder_port = ifs.extruder_port %}
  
  # if it is a different port than the extruder one
  {% if extruder_port != port %}
    _CONSUME #check if we need to extrude the leftover filament because run out in the IFS

    {% set filament_load_speed    = params.FILAMENT_LOAD_SPEED|default(ifs.filament_load_speed)|int %}
    {% set filament_home_speed    = params.FILAMENT_HOME_SPEED|default(ifs.filament_home_speed)|int %}
    {% set filament_tube_length   = params.FILAMENT_TUBE_LENGTH|default(ifs.filament_tube_length)|int %}
    {% set filament_drop_length   = params.FILAMENT_DROP_LENGTH|default(ifs.filament_drop_length)|int %}
    {% set filament_catch_length   = params.FILAMENT_CATCH_LENGTH|default(ifs.filament_catch_length)|int %}
    {% set filament_pressure_length   = params.FILAMENT_PRESSURE_LENGTH|default(ifs.filament_pressure_length)|int %}
    {% set extruder_temp          = (printer.extruder.target or printer['gcode_macro _IFS_VARS'].extruder_temp or 255)|int %}

    _IFS_VARS extruder_fan={printer["fan_generic fanM106"].speed or 255}
    M106 S0
    
    _G28
    {% if not printer.print_stats.state == "printing" %}
        _GOTO_TRASH
    {% endif %}

    M104 S{extruder_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp-2} MAXIMUM={extruder_temp+4}
    
    #UNLOAD (CUT and PULL back from IFS)
    _IFS_UNLOAD

    {% if printer['gcode_macro _NOPOOP'].nopoop == 0 %}
      _GOTO_TRASH # If we are printing and did not need to cut, then now we will go to TRASH
    {% endif %}
    
    #LOAD
    IFS_F24 PRUTOK={port}
    IFS_F10 PRUTOK={port} LEN={filament_tube_length} SPEED={filament_home_speed} CHECK=1 # Homering the filament requires a safe and fixed speed
    
    G92 E0

    #for 24mm retraction before cut, 37mm are needed to fill the hotend without material oozing out
    # 1/3 of filament_drop_length for the extruder catch the filament
    IFS_F10 PRUTOK={port} LEN={filament_pressure_length} SPEED={filament_load_speed}  #pressure
    G1 E{filament_drop_length/3} F{(filament_load_speed)|int}
    IFS_F10 PRUTOK={port} LEN={(filament_drop_length/3*0.7)|int} SPEED={filament_load_speed}
    IFS_F39 PRUTOK={port}

    IFS_F23 PRUTOK={port} WAIT=0 #this set chan = port in the IFS
    SET_EXTRUDER_SLOT SLOT={port} #this set_cur_port(zmod_ifs.py) so ifs_motion_sensor read the current port

    # 2/3 of filament_drop_length for check if motion sensor detects move.
    G1 E{filament_drop_length/3*2} F{filament_load_speed}

    _CHECK_MOTION PORT={port}

    G92 E0
    
  {% endif %}

[gcode_macro _FILAMENT_CUT]
description: Отрезаем пруток
gcode:
    {% set ifs = printer['gcode_macro _IFS_VARS'] %}
    {% set filament_unload_before_cutting  = params.FILAMENT_UNLOAD_BEFORE_CUTTING|default(ifs.filament_unload_before_cutting)|int %}
    {% set filament_unload_after_cutting   = params.FILAMENT_UNLOAD_AFTER_CUTTING|default(ifs.filament_unload_after_cutting)|int %}
    {% set filament_unload_speed           = params.FILAMENT_UNLOAD_SPEED|default(ifs.filament_unload_speed)|int %}

    RESPOND PREFIX="info" MSG="Cutting the filament"
    {% if printer.toolhead.position.x < 20 %}
        G1 X20
    {% endif %}
    
    G92 E0
    # move to cut position and retract at the same time
    {% if printer.toolhead.position.y > 220.00 %}
        G1 Y220 F{ifs.sbros_trash_speed}
    {% endif %}
    G1 Y10 E-{filament_unload_before_cutting/3} F12000
    G1 Y-7.70 E-{filament_unload_before_cutting/3} F1800
    G1 X20 E-{filament_unload_before_cutting/3} F12000
    G1 X-2.00 F600 #Cut
    G92 E0
    G1 E-{filament_unload_after_cutting} F{filament_unload_speed}
    G92 E0
    G1 F18000

[gcode_macro _IFS_UNLOAD]
gcode:
    {% set cut = params.CUT|default(1)|int %}
    {% set release = params.RELEASE|default(0)|int %}
    
    {% set ifs = printer['gcode_macro _IFS_VARS'] %}
    {% set extruder_port = params.PORT|default(ifs.extruder_port)|int %}
    {% if extruder_port > 0 %}
      {% set filament_unload_speed           = params.FILAMENT_UNLOAD_SPEED|default(ifs.filament_unload_speed)|int %}
      {% set nozzle_cleaning_length          = params.NOZZLE_CLEANING_LENGTH|default(ifs.nozzle_cleaning_length)|int %}
  
      {% if cut == 1 %}
        _FILAMENT_CUT FILAMENT_UNLOAD_SPEED={filament_unload_speed}
        {% set _NOPOOP = printer['gcode_macro _NOPOOP'] %}
        {% if _NOPOOP.nopoop == 0 %}
          _GOTO_TRASH
        {% else %}
          SET_GCODE_VARIABLE MACRO=_NOPOOP VARIABLE=nopoop VALUE=0
          G1 X20 F12000
          {% if _NOPOOP.x > 0 %}
            G1 X{_NOPOOP.x}
            G1 Y{_NOPOOP.y}
            G1 Z{_NOPOOP.z}
          {% endif %}
        {% endif %}
      {% endif %}
      
      G92 E0
  
      RESPOND PREFIX="info" MSG="Unloading filament {extruder_port}"
      IFS_F24 PRUTOK={extruder_port}
      G1 E-{nozzle_cleaning_length} F{filament_unload_speed}
      IFS_F11 PRUTOK={extruder_port} LEN={nozzle_cleaning_length} SPEED={filament_unload_speed}
      _IFS_VARS extruder_port=0
      {% if release== 1 %}
        IFS_F39 PRUTOK={extruder_port}
      {% endif %}
      
    {% endif %}


# Check the filament movement when _INSERT_PORT_IFS to ensure everything is OK before continuing with printing/pooping from the slicer

[gcode_macro _CHECK_MOTION]
gcode:
    {% set port = params.PORT|default(1)|int %}
    
    {% if not printer['filament_motion_sensor _ifs_motion_sensor_'+port|string].filament_detected %}
      _IFS_UNLOAD CUT=0 PORT={port} RELEASE=1
      PAUSE REASON="loading"
    {% else %}
      _IFS_VARS extruder_port={port}
    {% endif %}


# disable timeout when printing

[idle_timeout]
  timeout = 300 #5 Minutes
gcode:
  {% if printer.pause_resume.is_paused %}
    RESPOND PREFIX="info" MSG="Timeout ignored because printer state == paused."
    M104 S0 # Cool only the hotend after a 5-minute pause
  {% else %}
    M84
    TURN_OFF_HEATERS
    M107
   {% endif %}


# macros for start, stop, pause and end printing

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
    _IFS_VARS current_tool=-1
    {% if printer.print_stats.state=="paused" or printer.print_stats.state == "printing" %}
        END_PRINT
    {% endif %}
    CANCEL_PRINT_BASE
    ZRESTORE TEST=2

[gcode_macro END_PRINT]
description: End G-code
gcode:
    _IFS_VARS current_tool=-1
    
    M107 ; turn off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed 
    {% if "xyz" in printer.toolhead.homed_axes %}
      G91 ;Relative positioning
      G1 F1800 E-2 ; Retract filament 2 mm to prevent oozing
      G1 F3000 Z5 ; Move Z Axis up 5 mm
      G90
      M83
      _DISABLE_SENSORS
      _IFS_UNLOAD RELEASE=1
      _GOTO_TRASH
      {% set z = printer.gcode_move.gcode_position[2] | float %}
      {% set z_max = printer.toolhead.axis_maximum.z %}
      {% set z_proposed = z + 100 %}
      {% set z_target = z_max if z_proposed > z_max else z_proposed %}
      G1 Z{z_target} F600
    {% endif %}             
    M84                     ; turn off steppers
    M117
    ZRESTORE TEST=2

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
gcode:
  {% if printer.print_stats.state == "printing" %}
    M106 S0
    {% set reason = params.REASON|default('') %}
    {% set ifs = printer['gcode_macro _IFS_VARS'] %}

    {% if "xyz" in printer.toolhead.homed_axes %}
      {% set z_max = 220 %}
      {% set pos_act = printer.gcode_move.gcode_position %} #absolute position
      {% if pos_act.z < (z_max - 2) %}
        {% set z_safe = pos_act.z + 2 %}
      {% else %}
        {% set z_safe = z_max %}
      {% endif %}
    {% endif %}
    # extruder temp is store after each filament change (see _T command)
    # extruder temp go to 0 after 5 minutes paused (see [idle_timeout] section)
    _IFS_VARS extruder_temp={(printer.extruder.target or ifs.extruder_temp or 255)|int}
    _IFS_VARS extruder_fan={printer["fan_generic fanM106"].speed or 255}
    {% if reason != 'backup' %}
      PAUSE_BASE
    {% endif %}
    _DISABLE_SENSORS
    {% if ifs.start == 0 %}
      {% if reason != 'loading' %}
          # We are printing so we park
          {% if "xyz" in printer.toolhead.homed_axes %}
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=x_act VALUE={pos_act.x}
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=y_act VALUE={pos_act.y}
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=z_act VALUE={pos_act.z}
            G1 E-2 F300
            G92 E0
            G1 Z{z_safe} F900 #absolute position
            _GOTO_TRASH
          {% endif %}
          {% if reason != 'backup' %}
            RESPOND PREFIX="info" MSG="Pause during printing"
          {% endif %}
      {% else %}
          # We are loading and we PAUSE then we are already in trash position, we dont need parking
          SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=x_act VALUE=0
          SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=y_act VALUE=0
          SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=z_act VALUE=0
          {% if reason != 'backup' %}
            RESPOND PREFIX="info" MSG="Pause during loading"
          {% endif %}
      {% endif %}
      {% set tip = "Check that there is nothing obvious, such as a knot in the filament spool, or similar, and press “Resume printing” at least once before starting to look more deeply into the cause of the jam that is causing this pause" %}
      {% if reason == 'loading' %}
        _INFO_DIALOG TITLE="Pause" MSG="Jam detected loading filament ({ifs.extruder_port|string}), pausing..." TIP="{tip}" CLOSE=1
      {% elif reason == 'jam' %}
        _INFO_DIALOG TITLE="Pause" MSG="Jam detected (Motion) ({ifs.extruder_port|string}), pausing..." TIP="{tip}" CLOSE=1
      {% elif reason == 'nobackup' %}
        _INFO_DIALOG TITLE="Pause" MSG="Run out filament (Head) ({ifs.extruder_port|string}), no backup alternative has been found, pausing..." CLOSE=1
      {% elif reason == 'runout' %}
        _INFO_DIALOG TITLE="Pause" MSG="Run out filament (Head) ({ifs.extruder_port|string}), pausing..." TIP="{tip}" CLOSE=1
      {% elif reason == 'broken' %}
        _INFO_DIALOG TITLE="Pause" MSG="Broken filament in the IFS tube (Head) ({ifs.extruder_port|string}), pausing..." TIP="{tip}" CLOSE=1
      {% elif reason == 'empty' %}
        _INFO_DIALOG TITLE="Pause" MSG="IFS Port ({ifs.extruder_port|string}) empty, please insert filament, pausing..." TIP="{tip}" CLOSE=1
      {% endif %}
      {% if reason != 'backup' %}
        PLAY_MIDI FILE=Attention.mid
      {% endif %}
    {% endif %}
    {% if printer.extruder.temperature > 170 and ifs.start == 0 and not printer['filament_switch_sensor head_switch_sensor'].filament_detected %}
      G1 E20 F130 # Extrude any remaining filament that may be left between the sensor head and the extruder wheels
      G92 E0
    {% endif %}
    {% if reason == 'backup' %}
      RESUME FORCE=1
    {% endif %}
  {% endif %}

[gcode_macro RESUME]
variable_x_act:0
variable_y_act:0
variable_z_act:0
rename_existing: RESUME_BASE
gcode:
  {% set force = params.FORCE|default(0)|int %}
  {% if force or printer.print_stats.state == "paused" %}
    {% set ifs = printer['gcode_macro _IFS_VARS'] %}
    
    # restore extruder temp
    {% if ifs.extruder_temp > 0 %}
      M104 S{ifs.extruder_temp}
      TEMPERATURE_WAIT SENSOR=extruder MINIMUM={ifs.extruder_temp-2} MAXIMUM={ifs.extruder_temp+4}
    {% endif %}
    _ENABLE_SENSORS
    {% if ifs.current_tool >= 0 %}
        T{ifs.current_tool}
        POOP FLUSH_LENGTH=45
    {% endif %}
    
    {% set z_act = printer['gcode_macro RESUME'].z_act %}
    {% if z_act > 0 %}
        {% set x_act = printer['gcode_macro RESUME'].x_act %}
        {% set y_act = printer['gcode_macro RESUME'].y_act %}
        # We restore X and Y first, then Z, to avoid collisions
        {% if printer.toolhead.position.y > 220.00 %}
            G1 Y220 F{ifs.sbros_trash_speed}
        {% endif %}
        G1 X{x_act} Y{y_act} F3000
        G1 Z{z_act} F300 
    {% endif %}
    #restore fan
    M106 S{ifs.extruder_fan}
    RESUME_BASE # this will restore XYZ but we have already done so
    
  {% endif %}

[gcode_macro POOP]
gcode:
  {% set extruder_temp = (printer.extruder.target or printer['gcode_macro _IFS_VARS'].extruder_temp or 255)|int %}
  {% set flush_length = params.FLUSH_LENGTH|default(75)|int %}
  {% set e_feedrate = params.E_FEEDRATE|default(130)|int %}

  _G28
  RESPOND PREFIX="info" MSG="Heating the nozzle to {extruder_temp} degrees"
  M104 S{extruder_temp}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp-2}
  _GOTO_TRASH
  G92 E0
  G1 E{flush_length-10} F{e_feedrate}
  G92 E0
  M106 S102
  G1 E10 F{e_feedrate}
  G92 E0
  G1 E-2 F300
  G92 E0
  M106 S0
  _SBROS_TRASH

[gcode_macro _INFO_DIALOG]
gcode:
  {% set ifs = printer['gcode_macro _IFS_VARS'] %}
  {% set title = params.TITLE | default('title') %}
  {% set msg = params.MSG | default('message') %}
  {% set info_dialog = ifs.info_dialog|default(1) %}
  {% set close = params.CLOSE|default(0) %}

  RESPOND PREFIX="info" MSG="{title}: {msg}"
  {% if info_dialog == 1 %}
    RESPOND PREFIX="info" MSG="{title}: {msg}"
    RESPOND TYPE=command MSG="action:prompt_begin {title}"
    RESPOND TYPE=command MSG="action:prompt_text {msg}"
    RESPOND TYPE=command MSG="action:prompt_text Run '_INFO_DIALOG_HIDE' to prevent any of these messages from being displayed again."
    {% if close|int == 1 %}
      RESPOND TYPE=command MSG="action:prompt_footer_button Close|RESPOND TYPE=command MSG='action:prompt_end'"
    {% endif %}
    RESPOND TYPE=command MSG="action:prompt_show"
  {% endif %}

[gcode_macro _INFO_DIALOG_SHOW]
gcode:
  _IFS_VARS info_dialog=1
  RESPOND PREFIX="info" MSG="The information dialogs have been hidden"

[gcode_macro _INFO_DIALOG_HIDE]
gcode:
  _IFS_VARS info_dialog=0
  RESPOND PREFIX="info" MSG="The information dialogs will be displayed"

[gcode_macro START_PRINT]
gcode:
  {% set ifs = printer['gcode_macro _IFS_VARS'] %}
  {% set extruder_temp = params.EXTRUDER_TEMP | default(255) | int %}
  {% set old_extruder_temp = (printer['gcode_macro _IFS_VARS'].extruder_temp)|int %}
  {% if old_extruder_temp > extruder_temp %}
    {% set extruder_temp =  old_extruder_temp %}
  {% endif %}
  {% set bed_temp = params.BED_TEMP | default(70)|int %}
  _IFS_VARS bed_temp={bed_temp}
  {% set tool = params.TOOL | default(0) | int %}
    CLEAR_PAUSE
    RESPOND PREFIX="info" MSG="Start print {extruder_temp}/{bed_temp} ..."
    M140 S{bed_temp}
    M104 S{extruder_temp}
    _G28
    {% set extruder_temp = params.EXTRUDER_TEMP | default(255) | int %}
    _IFS_VARS extruder_temp={extruder_temp|int}
    #ZCONTROL_ABORT
    #ZCONTROL_ON
    #ZSSH_RELOAD
    _IFS_VARS extruder_port=-1
    _IFS_VARS consume=0
    SET_GCODE_VARIABLE MACRO=_NOPOOP VARIABLE=nopoop VALUE=0
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp-2}
    _CLEAR_REZINA
    {% if tool >= 0 %}
      T{tool}
    {% endif %}
    _DISABLE_SENSORS
    _INFO_DIALOG TITLE="Poop" MSG="Pooping the previous color/material from the hotend ..."
    POOP
    {% if ifs.kamp == 1 %}
      BED_MESH_CLEAR
      _INFO_DIALOG TITLE="Leveling" MSG="Nozzle cleaning ..."
      _CLEAR_NOZZLE
      LOAD_CELL_TARE
      _SET_GCODE_OFFSET Z=0.0
      _INFO_DIALOG TITLE="Leveling" MSG="Bed leveling (KAMP) ..."
      _KAMP_BED_MESH_CALIBRATE
    {% else %}
      BED_MESH_PROFILE LOAD="auto"
    {% endif %}
    M104 S{extruder_temp}
    RESPOND TYPE=command MSG="action:prompt_end"
    _SMART_PARK
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp-2}
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp-2} MAXIMUM={bed_temp+4}
    
    SET_FILAMENT_SENSOR SENSOR=head_switch_sensor ENABLE=1
    {% if ifs.external ==  0 %}
      SET_FILAMENT_SENSOR SENSOR=ifs_motion_sensor ENABLE=1
    {% endif %}
    LINE_PURGE
    SET_GCODE_VARIABLE MACRO=_IFS_VARS VARIABLE=start VALUE=0
    
#  more redefining zmod macros

[gcode_macro _GOTO_TRASH]
description: Go to trash
gcode:
    {% set ifs = printer['gcode_macro _IFS_VARS'] %}
    # do nothing if it is already in the trash position 
    {% if not (printer.toolhead.position.x == ifs.trash_pos[0] and printer.toolhead.position.y == ifs.trash_pos[1]) %}
        RESPOND PREFIX="info" MSG="Go to trash"
        G90
        {% if printer.toolhead.position.x != ifs.trash_pos[0] %}
            {% if printer.toolhead.position.y > 220.00 %}
                G1 Y220 F{ifs.sbros_trash_speed}
            {% endif %}
            G1 X{ifs.trash_pos[0]} F12000
        {% endif %}
        G1 Y220 F12000 #fast to 220, no effect if it is already in 220
        G1 Y{ifs.trash_pos[1]} F3000
        G1 F12000
    {% endif %}

[gcode_macro _SBROS_TRASH]
description: Сброс через какашник без выдавливания
gcode:
  {% set ifs = printer['gcode_macro _IFS_VARS'] %}
    {% if printer.toolhead.position.x == ifs.trash_pos[0] %}
    G1 Y222 F{ifs.sbros_trash_speed}      ; Выход из какашника
    G1 Y{ifs.trash_pos[1]} F3000    ; Вход в какашник
    G1 Y222 F{ifs.sbros_trash_speed}      ; Выход из какашника
    #G1 Y{ifs.trash_pos[1]} F3000    ; Вход в какашник
    #G1 Y222 F{ifs.sbros_trash_speed}      ; Выход из какашника
    
    # We end up in a trash position, so there is an extra swing when go back to printing
    G1 Y{ifs.trash_pos[1]} F3000    ; Вход в какашник
    G1 F{ifs.sbros_trash_speed}
    {% endif %}

[gcode_macro _CLEAR_REZINA]
description: Чистка об резинку
gcode:
     RESPOND PREFIX="info" MSG="Cleaning the nozzle on rubber"

    G1 Y220 F3000
    G1 X65              ; 1/2 резинки по X
    G1 Y228.8           ; заезд на резинку по Y
    G1 X80              ; 1/2 резинки по X
    G1 X65              ; 1/4 резинки по X
    G1 X80              ; 1/2 резинки по X
    G1 X65              ; 1/4 резинки по X
    G1 X80              ; 1/2 резинки по X
    G1 X65              ; 1/4 резинки по X
    # and stay in the silicone
    
    G1 F12000 #fast again
    
[gcode_macro _CLEAR_NOZZLE] 
gcode:
    {% set extruder_temp = printer.extruder.target or default(255) %}
    _G28
    M104 S{extruder_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}
    _GOTO_TRASH
    G92 E0
    G1 E35 F130
    G92 E0
    M104 S{extruder_temp-75}
    M106 S102
    G1 E10 F130
    G92 E0
    G1 E-2 F300
    G92 E0
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={extruder_temp-25}
    _SBROS_TRASH
    _CLEAR_REZINA
    M106 S{255/100*80}
    TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={extruder_temp-73}
    M106 S0
    G1 Y220 F3000
    
[gcode_macro _ZSDCARD_PRINT_FILE]
gcode:
    {% set force_md5 = printer.save_variables.variables.force_md5|default(1) | int %}
    {% if 'FILENAME' in params %}
        {% set filename = params.FILENAME|default("")|string %}
    {% else %}
        {action_raise_error("Error! Filename not specified.")}
    {% endif %}

    {% set path = printer.configfile.settings.virtual_sdcard.path %}
    
    {% if force_md5 == 1 %}
        RESPOND PREFIX="info" MSG="Started MD5 check {filename}"
        CHECK_MD5 DELETE=True FILENAME="{path}{filename}"
    {% endif %}

    RESPOND TYPE=command MSG="action:prompt_begin Wait"
    RESPOND TYPE=command MSG="action:prompt_text Processing {filename} ..."
    RESPOND TYPE=command MSG="action:prompt_show"
    {% set filename = path + filename %}

    RUN_SHELL_COMMAND CMD=preprint PARAMS={'"%s"' % (filename.replace("'", "\\\'").replace(" ", "\ "))}
    

[gcode_shell_command preprint]
command: python3 /opt/config/mod_data/plugins/bambufy/preprint.py
timeout: 120
verbose: True

[gcode_macro SDCARD_PRINT_FILE]
rename_existing: BASE_SDCARD_PRINT_FILE
gcode:
    BASE_SDCARD_PRINT_FILE {rawparams}

[gcode_macro LOAD_FILAMENT]
gcode:
    {% set extruder_temp = params.EXTRUDER_TEMP|default(255) | float %}
    {% set extrude_len   = params.EXTRUDE_LEN|default(120) |float %}
    {% set speed = params.SPEED|default(300)|float %}

    RESPOND PREFIX="info" MSG="Loading filament at {extruder_temp} for {extrude_len}mm at {speed/60} mm/s"
    M104 S{extruder_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp-1}

    SAVE_GCODE_STATE NAME=load_state
    M83
    G92 E0
    _DISABLE_SENSORS
        G1 E{extrude_len/3} F{speed}
        G1 E{extrude_len/3} F{speed}
        G1 E{extrude_len/3} F{speed}
        M400
    _ENABLE_SENSORS
    RESTORE_GCODE_STATE NAME=load_state

[gcode_macro UNLOAD_FILAMENT]
gcode:
    {% set speed = params.SPEED|default(300) %}
    {% set extruder_temp = params.EXTRUDER_TEMP|default(255) | float %}
    {% set extrude_len   = params.EXTRUDE_LEN|default(120) |float %}

    RESPOND PREFIX="info" MSG="Unloading filament at {extruder_temp} for {extrude_len}mm at {speed/60} mm/s"
    M104 S{extruder_temp}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={extruder_temp}
    _IFS_VARS extruder_port=0
    SAVE_GCODE_STATE NAME=unload_state
    M83
    G92 E0
    _DISABLE_SENSORS
        G1 E-20 F{speed}
        G4 P5000
        G1 E-{(extrude_len-20)/2} F{speed}
        G1 E-{(extrude_len-20)/2} F{speed}
        M400
    _ENABLE_SENSORS
    RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro _DISABLE_SENSORS]
gcode:
    SET_FILAMENT_SENSOR SENSOR=head_switch_sensor ENABLE=0
    SET_FILAMENT_SENSOR SENSOR=ifs_motion_sensor ENABLE=0

[gcode_macro _ENABLE_SENSORS]
gcode:
    SET_FILAMENT_SENSOR SENSOR=head_switch_sensor ENABLE=1
    SET_FILAMENT_SENSOR SENSOR=ifs_motion_sensor ENABLE=1

[gcode_macro BED_CALIBRATE]
gcode:
  {% set extruder_temp = params.EXTRUDER_TEMP|default(255) | float %}
  {% set bed_temp = params.BED_TEMP|default(70)|float %}
  
  M140 S{bed_temp}
  M104 S{extruder_temp}
  _G28
  BED_MESH_CLEAR
  _CLEAR_NOZZLE
  LOAD_CELL_TARE
  M190 S{bed_temp}
  BED_MESH_CALIBRATE PROFILE="auto"
  M140 S0
  M104 S0
  SAVE_CONFIG

[gcode_macro BED_SCREWS]
gcode:
  {% set extruder_temp = params.EXTRUDER_TEMP|default(255) | float %}

  M104 S{extruder_temp}
  _G28
  _CLEAR_NOZZLE
  LOAD_CELL_TARE
  SCREWS_TILT_CALCULATE
  M104 S0

[gcode_shell_command zrestore]
command: /opt/config/mod_data/plugins/bambufy/restore_gcode.sh
timeout: 600.0
verbose: True

[gcode_macro _T_CURRENT]
gcode:
  {% set ifs = printer['gcode_macro _IFS_VARS'] %}
  {% if ifs.current_tool >= 0 %}
    T{ifs.current_tool}
  {% endif %}
   
# disabled zmod macros

[delayed_gcode _TEST_RESTORE]
initial_duration: 0
gcode:
    #disabled

[gcode_macro _UGOL_PARK]
gcode:
    #disabled

[gcode_macro _PRINT_CLEAR_NOZZLE]
gcode:
    #disable

[gcode_macro _PRINT_IFS_MOTION]
gcode:
    #disabled

[gcode_macro _A_CHANGE_FILAMENT]
gcode:
  #disabled

[gcode_macro _START_MESH]
gcode:
  #disabled

